# Remove last opened message when opened
clear


# Github support for prompt 
prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${2}${s}";
    else
        return;
    fi;
}

# Setup colors for use
export TERM='gnome-256color';

bold=$(tput bold);
blue=$(tput setaf 33)
green=$(tput setaf 46)
yellow=$(tput setaf 226)
orange=$(tput setaf 202)
red=$(tput setaf 196)
white=$(tput setaf 15)
fixColor=$(tput sgr0)

# Highlight the name if using root 
if [[ "${USER}" == "root" ]]; then
    userStyle="${bold}${red}";
else
    userStyle="${red}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${orange}";
else
    hostStyle="${orange}";
fi;

# Set terminal prompt
PS1="\n"
PS1+="\[${userStyle}\]Matt " # User info
PS1+="\[${white}\]at "
PS1+="\[${hostStyle}\]\h " # Machine Info
PS1+="\[${white}\]in "
PS1+="\[${yellow}\]\W" # Directory
PS1+="\$(prompt_git \"\[${white}\] on \[${blue}\]\" \"\[${blue}\]\")"; # Git repository
PS1+="\[${green}\]\n> " # Cursor
PS1+="\[${fixColor}\]"
export PS1

# Set terminal title
PROMPT_COMMAND='echo -en "\033]0;Matt Kline - Terminal\a"'

# Set default block size for ls
export BLOCKSIZE=1k


# EASE OF USE
#--------------------------------------------------------------

# Show directory contents after stepping into
cd() { builtin cd "$@"; ls -FG; }

# Show directories in different color with directory marker and permissions
alias ls='ls -FG'

# Preferred less implementation
alias less='less -FSRXc'

# Allow creation of intermediate directories if specified
alias mkdir='mkdir -p'

# Count of non-hidden files in current directory
alias numFiles='echo $(ls -1 | wc -l)'

# Show all hidden files in Finder
alias showHiddenFiles='defaults write com.apple.finder ShowAllFiles TRUE && killall Finder'

# Hide all hidden files in Finder
alias hideHiddenFiles='defaults write com.apple.finder ShowAllFiles FALSE && killall Finder'

# Open current directory in Finder
alias openInFinder='open -a Finder ./'

# Open a file in sublime text
alias sublime='open ~/Applications/Sublime\ Text.app '

# Search for a specific file
alias search="find . -name"

# Search for a specific string at the start a file
searchStart () { /usr/bin/find . -name "$@"'*' ; }

# Search for a specific string at the end of a file
searchEnd () { /usr/bin/find . -name '*'"$@" ; }

# Use spotlight search
spotlightSearch () { mdfind "kMDItemDisplayName == '$@'wc"; }

# Change file permissions to prefered
alias updatePermissions='chmod -R a-x,o-w,+X $1/'

# Zip a folder
zipf () { zip -r "$1".zip "$1" ; } 

# Extract most know archives with one command
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# check for updates
alias checkUpdates='software update -l'

# update all available
alias updateAll='sudo softwareupdate -ia --verbose'


# NETWORKING
#--------------------------------------------------------------

# Run speed test
alias network='echo "Speed Test" && speedtest >> speed.txt && cat speed.txt | grep "load:" && rm speed.txt'

# Get public and local IP addresses
alias getIP='echo "Local IP" && ipconfig getifaddr en0 && echo "Public IP" && curl ifconfig.me'


# PROGRAMMING
#---------------------------------------------------------------

# Compile and run java file
alias javaRun='javac *.java; java $1'

# Compile and run Kotlin file
alias kotlinRun='Kotlinc *.kt; kotlin $1'

# Compile and run r file
alias rRun='R CMD BATCH *.r'

# Compile and run c file
alias cRun='gcc *.c -o $@; ./$1'
